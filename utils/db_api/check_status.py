import logging

from loader import dp
from utils.db_api.connect import connection


async def check_status_user(id):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 'no_reg', 'reg' –∏ 'ver' —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ
    """
    flag = 'no_reg'
    connect = await connection()
    try:
        with connect.cursor() as cursor:
            command_db = "SELECT * FROM `users`  "
            cursor.execute(command_db)
            rows = cursor.fetchall()
            for row in rows:
                if id == row.get('user_id'):
                    flag = 'reg'
                    if row.get('verification') > 0:
                        flag = 'ver'
                        break
                    else:
                        break
            connect.close()
            logging.info(f'C–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ')
            return flag
    except Exception as ex:
        await dp.bot.send_message(id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞–ø–∏—à–∏—Ç–µ @badmajor –æ–± –æ—à–∏–±–∫–µ")
        logging.info(f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è... –æ—à–∏–±–∫–∞:{ex}')
        connect.close()
        logging.info(f'C–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ')
        return flag


async def check_status_invite(ref):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 'no_reg', 'reg' –∏ 'ver' —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ
    """
    connect = await connection()
    try:
        with connect.cursor() as cursor:
            command = "SELECT `invite` FROM `users`  "
            cursor.execute(command)
            rows = cursor.fetchall()
            connect.close()
            for row in rows:
                if ref in row.get('invite'):
                    logging.info(f'C–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ')
                    return 'üÜó'
            logging.info(f'C–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ')
            return 'üÜì'
    except Exception as ex:
        await dp.bot.send_message(id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞–ø–∏—à–∏—Ç–µ @badmajor –æ–± –æ—à–∏–±–∫–µ")
        logging.info(f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è... –æ—à–∏–±–∫–∞:{ex}')
        connect.close()
        logging.info(f'C–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ')


async def check_status_completed(user_id):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∫–æ–ª—å–∫–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–π –ø—Ä–æ–≤–µ–ª user. Return int
    """
    connect = await connection()
    try:
        with connect.cursor() as cursor:
            command = "SELECT `completed` FROM `users` WHERE user_id=%s "
            cursor.execute(command, user_id)
            completed = cursor.fetchone().get('completed')
            connect.close()
            logging.info(f'C–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ')
            return completed
    except Exception as ex:
        await dp.bot.send_message(user_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å 'Completed', –Ω–∞–ø–∏—à–∏—Ç–µ @badmajor –æ–± –æ—à–∏–±–∫–µ")
        logging.info(f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è... –æ—à–∏–±–∫–∞:{ex}')
        connect.close()
        logging.info(f'C–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ')
